//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE   0
#define QWERTY 1 
#define WASD   2
#define NAV    3
#define SYM    4
#define ADJ    5

#define XXX &none
#define ___ &trans

#define MSNCTL C_AC_DESKTOP_SHOW_ALL_WINDOWS
#define C_AC_FWD C_AC_FORWARD

#define QUICK_TAP_MS 175

/*
&mt {
    quick-tap-ms = <QUICK_TAP_MS>;
    global-quick-tap;
    flavor = "balanced";
    tapping-term-ms = <300>;
    require-prior-idle-ms = <200>;
};
*/

/* Homerow Mods */

#define MAKE_HRM(NAME, HOLD, TAP)                                              \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;)

MAKE_HRM(hm, &kp, &kp)

&lt {
    quick-tap-ms = <QUICK_TAP_MS>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <200>;
};



&soft_off {
   hold-time-ms = <1000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            timeout-ms = <100>;
            key-positions = <34 35>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <500>;
            layers = <0 1 2>;
        };

        combo_alfred {
            timeout-ms = <100>;
            key-positions = <33 36>;
            bindings = <&kp LC(SPACE)>;
            require-prior-idle-ms = <500>;
            layers = <0 1 2>;
        };

        combo_wasd {
            timeout-ms = <100>;
            key-positions = <23 24 22>;
            bindings = <&tog WASD>;
            require-prior-idle-ms = <500>;
            layers = <0 1>;
        };

        combo_base {
            timeout-ms = <100>;
            key-positions = <33 34 32>;
            bindings = <&tog BASE>;
            require-prior-idle-ms = <500>;
            layers = <2 3>;
        };

        combo_qwerty {
            timeout-ms = <100>;
            key-positions = <36 37 35>;
            bindings = <&tog QWERTY>;
            require-prior-idle-ms = <500>;
            layers = <0 4>;
        };
    };

    macros {
        
    };

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(LEFT)>, <&kp LC(LA(LEFT))>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(RIGHT)>, <&kp LC(LA(RIGHT))>;
        };

        symgresc: sym_grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt SYM ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

//        lparlt: lparen_lt {
//            compatible = "zmk,behavior-mod-morph";
//            #binding-cells = <0>;
//            bindings = <&kp LPAR>, <&kp LT>;
//
//            mods = <(MOD_LSFT|MOD_RSFT)>;
//        };
//
//        rpargt: rparen_gt {
//            compatible = "zmk,behavior-mod-morph";
//            #binding-cells = <0>;
//            bindings = <&kp RPAR>, <&kp GT>;
//
//            mods = <(MOD_LSFT|MOD_RSFT)>;
//        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃    A[A]   ┃    R[C]   ┃    S[G]   ┃    T[S]   ┃     D     ┃   ┃     H     ┃    N[S]   ┃    E[G]   ┃    I[C]   ┃    O[A]   ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     (     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     )     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃  DEL[ADJ] ┃ ENTER[NAV]┃GR/ESC[SYM]┃   ┃ BSPC[SYM] ┃  SPC[NAV] ┃  TAB[ADJ] ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                            &kp Q       &kp W        &kp F      &kp P        &kp G          &kp J       &kp L         &kp U       &kp Y       &kp SEMI
                            &hm LALT A  &hm LCTRL R  &hm LGUI S &hm LSHFT T  &kp D          &kp H       &hm RSHFT N   &hm RGUI E  &hm RCTRL I &hm RALT O
                &kp LPAR    &kp Z       &kp X        &kp C      &kp V        &kp B          &kp K       &kp M         &kp COMMA   &kp DOT     &kp FSLH   &kp RPAR
                                                     &lt ADJ DEL &lt NAV ENTER &symgresc    &lt SYM BSPC &lt NAV SPACE &lt ADJ TAB
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        qwerty_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "QWERTY";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Y     ┃     U     ┃     I     ┃     O     ┃     P     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     S     ┃     D     ┃     F     ┃     G     ┃   ┃     H     ┃     J     ┃     K     ┃     L     ┃     ;     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     N     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     P     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃  DEL[ADJ] ┃ ENTER[NAV]┃GR/ESC[SYM]┃   ┃ BSPC[SYM] ┃  SPC[NAV] ┃  TAB[ADJ] ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                                &kp Q       &kp W        &kp E      &kp R        &kp T      &kp Y       &kp U          &kp I       &kp O        &kp P
                                &hm LALT A  &hm LCTRL S  &hm LGUI D &hm LSHFT F  &kp G      &kp H       &hm RSHFT J    &hm RGUI K  &hm RCTRL L  &hm RALT SEMI
                         &kp Q  &kp Z       &kp X        &kp C      &kp V        &kp B      &kp N       &kp M          &kp COMMA   &kp DOT      &kp FSLH       &kp P
                                                         &lt ADJ DEL &lt NAV ENTER &symgresc &lt SYM BSPC &lt NAV SPACE &lt ADJ TAB
            >;
        };
        
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        game_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "WASD";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃    TAB    ┃     Q     ┃     W     ┃     E     ┃     R     ┃   ┃    ESC    ┃     7     ┃     8     ┃     9     ┃     0     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   CAPS    ┃     A     ┃     S     ┃     D     ┃     F     ┃   ┃   GRAVE   ┃     4     ┃     5     ┃     6     ┃           ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃   QWERTY  ┃   SHIFT   ┃     Z     ┃     X     ┃     C     ┃     V     ┃   ┃           ┃     1     ┃     2     ┃     3     ┃           ┃    BASE   ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃   LCTRL   ┃   SPACE   ┃    LALT   ┃   ┃    BSPC   ┃   SPACE   ┃   ENTER   ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                                         &kp TAB    &kp Q  &kp W      &kp E      &kp R       &kp ESC    &kp N7     &kp N8     &kp N9  &kp N0
                                         &kp CAPS   &kp A  &kp S      &kp D      &kp F       &kp GRAVE  &kp N4     &kp N5     &kp N6  &none
                            &tog QWERTY &kp LSHFT  &kp Z  &kp X      &kp C      &kp V       &none      &kp N1     &kp N2     &kp N3  &none   &tog BASE
                                                           &kp LCTRL  &kp SPACE  &kp LALT    &kp BSPC   &kp SPACE  &kp ENTER
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        nav_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "NAV";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃    CAPS   ┃    HOME   ┃     UP    ┃   PG UP   ┃     MC    ┃   ┃     /     ┃     7     ┃     8     ┃     9     ┃     -     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ CAPS WORD ┃    LEFT   ┃    DOWN   ┃   RIGHT   ┃    BACK   ┃   ┃     *     ┃     4     ┃     5     ┃     6     ┃     +     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃  DT/WD L  ┃   GLOBE   ┃    END    ┃    INS    ┃  PG DOWN  ┃    FWD    ┃   ┃     0     ┃     1     ┃     2     ┃     3     ┃     =     ┃  DT/WD R  ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                            &kp CAPS    &kp HOME    &kp UP      &kp PG_UP   &kp RC(UP)      &kp FSLH    &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS
                            &caps_word  &kp LEFT    &kp DOWN    &kp RIGHT   &kp C_AC_BACK   &kp ASTRK   &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS
                &td0        &kp GLOBE   &kp END     &kp INS     &kp PG_DN  &kp C_AC_FWD     &kp KP_N0   &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp EQUAL   &td1
                                                    &trans      &trans      &trans          &trans      &trans      &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        sim_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "SYM";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     &     ┃     #     ┃     $     ┃     %     ┃     <     ┃   ┃     >     ┃     ^     ┃     &     ┃     *     ┃     :     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     @     ┃     !     ┃     '     ┃     (     ┃     [     ┃   ┃     ]     ┃     )     ┃     -     ┃     +     ┃     /     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     &     ┃     |     ┃     ?     ┃     "     ┃     `     ┃     {     ┃   ┃     }     ┃     ~     ┃     _     ┃     =     ┃     \     ┃     :     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃     _     ┃           ┃   ┃           ┃     _     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                            &kp AMPS     &kp HASH    &kp DLLR   &kp PRCNT   &kp LT          &kp GT      &kp CARET   &kp AMPS    &kp ASTRK   &kp COLON 
                            &kp AT       &kp EXCL    &kp SQT    &kp LPAR    &kp LBKT        &kp RBKT    &kp RPAR    &kp MINUS   &kp PLUS    &kp FSLH 
                           &hm LALT AT &hm LCTRL EXCL &hm LGUI SQT &hm LSHFT LPAR &kp G    &kp H &hm RSHFT RPAR &hm RGUI MINUS &hm RCTRL PLUS &hm RALT FSLH
                &kp AMPS    &kp PIPE     &kp QMARK   &kp DQT    &kp GRAVE   &kp LBRC        &kp RBRC    &kp TILDE   &kp UNDER   &kp EQUAL   &kp BSLH    &kp COLON
                                                     &trans     &kp UNDER   &trans          &trans      &kp UNDER   &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        adjust_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "ADJ";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃  BT CLEAR ┃  OUT TOG  ┃  BT PREV  ┃  BT NEXT  ┃    VOL+   ┃   ┃     F1    ┃    F4     ┃    F7     ┃    F10    ┃    F13    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃  BT SEL 0 ┃  BT SEL 1 ┃  BT SEL 2 ┃  BT SEL 3 ┃    VOL-   ┃   ┃     F2    ┃    F5     ┃    F8     ┃    F11    ┃    F14    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃    PWR    ┃   KB OFF  ┃    PREV   ┃    PLAY   ┃    NEXT   ┃    MUTE   ┃   ┃     F3    ┃    F6     ┃    F9     ┃    F12    ┃    F15    ┃    F24    ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃   \MEH/   ┃  \HYPER/  ┃   ┃  \HYPER/  ┃   \MEH/   ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            
            bindings = <
                            &out OUT_TOG &bt BT_CLR  &bt BT_PRV   &bt BT_NXT  &kp C_VOL_UP    &kp F1     &kp F4      &kp F7      &kp F10     &kp F13
                            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &kp C_VOL_DN  &kp F2     &kp F5      &kp F8      &kp F11     &kp F14
                 &kp C_PWR  &soft_off   &kp C_PREV  &kp C_PP     &kp C_NEXT  &kp C_MUTE      &kp F3     &kp F6      &kp F9      &kp F12     &kp F15     &kp F24
                                              &trans &sk LS(LC(LALT)) &sk LS(LC(LA(LGUI)))    &sk RS(RC(RA(RGUI))) &sk RS(RC(RALT)) &trans
            >;
        };
    };
};
